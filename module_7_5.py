import os

"""
Домашнее задание по теме "Файлы в операционной системе" 

Цель задания:

Освоить работу с файловой системой в Python, используя модуль os.

Научиться применять методы os.walk, os.path.join, os.path.getmtime, 
os.path.dirname, os.path.getsize и использование модуля time для корректного отображения времени.

Задание:

Создайте новый проект или продолжите работу в текущем проекте.

Используйте os.walk для обхода каталога, путь к которому указывает переменная directory
Примените os.path.join для формирования полного пути к файлам.
Используйте os.path.getmtime и модуль time для получения и отображения времени последнего изменения файла.
Используйте os.path.getsize для получения размера файла.
Используйте os.path.dirname для получения родительской директории файла.

Комментарии к заданию:
Ключевая идея – использование вложенного for
for root, dirs, files in os.walk(directory):
  for file in files:
    filepath = ?
    filetime = ?
    formatted_time = time.strftime("%d.%m.%Y %H:%M", time.localtime(filetime))
    filesize = ?
    parent_dir = ?
    print(f'Обнаружен файл: {file}, Путь: {filepath}, Размер: {filesize} байт, Время изменения: {formatted_time}, Родительская директория: {parent_dir}')

Так как в разных операционных системах разная схема расположения папок, тестировать проще всего в папке проекта (directory = “.”)
Пример возможного вывода:
Обнаружен файл: main.py, Путь: ./main.py, Размер: 111 байт, Время изменения: 11.11.1111 11:11, Родительская директория.

"""

"""
Лекция по заданной теме и практическая отработка
"""
print('Текущая директория: ', os.getcwd())
# os.mkdir('new in module 7') #  создание новой папки внутри текущего директория

# которое проверяет наличие указанного пути. Если путь существует, текущая директория меняется с помощью метода chdir().
# В противном случае создаётся новая папка, после чего также изменяется директория
if os.path.exists('new in module 7'):
    os.chdir('new in module 7')
else:
    os.mkdir('new in module 7')
    os.chdir('new in module 7')

print('Текущая директория: ', os.getcwd())

# Создание вложенных папок
#os.makedirs(r'third\fourth') # важно учитывать использование двойного обратного слэша (\\) и префикса "r" перед строкой.

# Префикс "r" позволяет интерпретатору Python корректно обрабатывать строку,
# избегая интерпретации символов, таких как обратный слэш, как управляющих последовательностей
# Каждая операционная система использует свои разделители путей.

# В Windows для этой цели используется обратный слэш (\), который в Python является специальным символом.
# Поэтому его необходимо либо экранировать с помощью двойного слэша (\\), либо использовать префикс "r" перед строкой,
# чтобы Python правильно интерпретировал путь.

print(os.listdir()) # возвращает список содержимого текущей директории

# Для получения информации о вложенности используется метод os.walk(), в котором указывается точка ('.'),
# обозначающая текущую директорию. После выполнения цикла "for i in os.walk('.')"
# можно увидеть, что в рабочей директории «second» находится папка «third»,
# а в директории «third» имеется подпапка «fourth».

for i in os.walk('.'):
    print(i)

print('Текущая директория: ', os.getcwd())
os.chdir(r'C:\Users\ZakharovaEI5\PycharmProjects\Project 0,0\Module 7 open files')  #рабочая директория изменена
print('Текущая директория: ', os.getcwd())
print(os.listdir())
file = [f for f in os.listdir() if os.path.isfile(f)] # будет содержать только файлы
dirs = [d for d in os.listdir() if os.path.isdir(d)]  #будет содержать только директории

print(dirs)
print(file)

#Запуск файлов и сбор информации о них

os.startfile(r'C:\Users\ZakharovaEI5\PycharmProjects\Project 0,0\Module 7 open files\new in module 7') # открыта папка
os.startfile(file[3]) # Здесь [3] — это индекс файла в списке file,
# указывающий на четвертый элемент. После выполнения этой команды будет открыт текстовый файл


print(os.stat(file[3])) # возвращает информацию о файле, включая время создания, время обновления, размер и другие атрибуты. Чтобы получить конкретную информацию, можно добавить нужный атрибут, например "os.stat(file[3]).st_size", который вернёт размер файла.

#os.system('pip install random2') #  позволяет установить зависимость через терминал, если такой зависимости еще нет. Это может быть полезно для автоматизации задач при написании bash-скриптов.



# Bash-скрипты — это текстовые файлы, содержащие последовательность команд,
# которые можно выполнить в оболочке Bash (командной строке Unix-подобных систем).
# Они широко используются для автоматизации системных задач, таких как управление файлами, настройка серверов и запуск программ.

"""
Решение ДЗ

"""
import time

directory = os.getcwd()

for root, dirs, files in os.walk(directory):
  for file in files:
    filepath = os.path.join
    filetime = os.path.getmtime()
    formatted_time = time.strftime("%d.%m.%Y %H:%M", time.localtime(filetime))
    filesize = os.path.getsize
    # path = 'C:\Users\ZakharovaEI5\PycharmProjects\Project 0,0\Module 7 open files\new in module 7'
    parent_dir = os.path.dirname(filepath)
    print(f'Обнаружен файл: {file}, Путь: {filepath}, Размер: {filesize} байт, Время изменения: {formatted_time}, Родительская директория: {parent_dir}')
# os.walk
#
# directory
